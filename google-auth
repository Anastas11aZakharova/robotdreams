function formatTestResults() {
    const rawData: string = fs.readFileSync("./testResults.json", "utf-8");
    const jsonObjects: TestResult[] = JSON.parse(rawData);

    jsonObjects.sort((a, b) => {
        if (a.specFile !== b.specFile) {
            return a.specFile.localeCompare(b.specFile);
        }
        return a.testName.localeCompare(b.testName);
    });

    // Group retries by test name and spec file
    const testResultsMap = new Map<string, TestResult>();

    jsonObjects.forEach((result) => {
        const key = `${result.specFile}::${result.testName}`;
        if (!testResultsMap.has(key) || result.passed) {
            testResultsMap.set(key, result); // Keep the first successful attempt or the latest failure
        }
    });

    const uniqueResults = Array.from(testResultsMap.values()); // Keep only the deduplicated results

    const totalTests = uniqueResults.length;
    const passedTests = uniqueResults.filter((result) => result.passed);
    const failedTests = uniqueResults.filter((result) => !result.passed);

    const passedTestsFormatted = passedTests
        .map(
            (result) =>
                `üìù \\tests\\specs\\${result.specFile} ‚Üí ${result.testName}`
        )
        .join("\n");

    const failedTestsFormatted = failedTests
        .map(
            (result) =>
                `üìù \\tests\\specs\\${result.specFile} ‚Üí ${result.testName}\n   üìå Failure: ${formatError(result.error)}`
        )
        .join("\n");

    return `üìù Test Results:
üìä Total: ${totalTests}
‚úÖ Passed: ${passedTests.length}
‚ùå Failed: ${failedTests.length}

‚úÖ Passed Tests:
${passedTestsFormatted}

‚ùå Failed Tests:
${failedTestsFormatted}
`.replace(/:ru:/g, '');
}

export const config: Options.Testrunner = {
    mochaOpts: {
        ui: "bdd",
        timeout: 600000,
        retries: 3
    },
    afterTest: async function (
        test,
        context,
        { error, result, duration, passed, retries }
    ) {
        let testResults: Array<TestResult> = [];

        const specFile = test.file.match(/[^\\/]+\.spec\.ts$/)?.[0] || "";
        const testName = test.title;
        const testKey = `${specFile}::${testName}`;

        if (fs.existsSync(resultsFilePath)) {
            const rawData = fs.readFileSync(resultsFilePath, "utf-8");
            if (rawData.trim()) {
                testResults = JSON.parse(rawData);
            }
        }

        // Remove previous attempts of the same test to store only the latest failure or first success
        testResults = testResults.filter((t) => `${t.specFile}::${t.testName}` !== testKey);

        testResults.push({
            specFile,
            testName,
            passed,
            error: error?.message,
        });

        fs.writeFileSync(
            resultsFilePath,
            JSON.stringify(testResults, null, 2),
            "utf-8"
        );

        if (error) {
            await browser.takeScreenshot();
        }
    }
};



=---------
if (fs.existsSync(resultsFilePath)) {
        const rawData = fs.readFileSync(resultsFilePath, "utf-8");
        if (rawData.trim()) {
            testResults = JSON.parse(rawData);
        }
    }

    testResults.forEach(({ testName }) => {
        const formattedTestName = testName.replace(/\s+/g, "-"); // Convert spaces to dashes

        // Find the correct video file
        const matchingVideo = videoFiles.find((file) => file.startsWith(formattedTestName));

        if (matchingVideo) {
            const source = path.join(videoDir, matchingVideo);
            const destination = path.join(allureDir, matchingVideo);

            // Wait for FFmpeg to complete
            let attempts = 0;
            while (fs.statSync(source).size === 0 && attempts < 10) {
                console.log(`‚è≥ Waiting for video to render: ${matchingVideo}`);
                attempts++;
                Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, 1000); // Sleep for 1 second
            }

            if (fs.statSync(source).size > 0) {
                fs.copyFileSync(source, destination);
                console.log(`üìπ Copied video: ${source} -> ${destination}`);

                // Attach video to Allure
                addAttachment("Test Video", fs.readFileSync(destination), "video/mp4");
                console.log(`‚úÖ Attached video to Allure: ${matchingVideo}`);
            } else {
                console.warn(`‚ö†Ô∏è Skipping empty video file: ${source}`);
            }
        } else {
            console.warn(`‚ö†Ô∏è No matching video found for test: ${testName}`);
        }
    });




name: WDIO Tests

on:
  workflow_dispatch: 
  schedule:
    - cron: "0 0 * * *"  

jobs:
  test:
    if: github.ref == 'refs/heads/ap/smoke-tests' 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js (Latest)
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Set up environment variables (Secure)
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          WORKOS_CLIENT_ID: ${{ secrets.WORKOS_CLIENT_ID }}
          WORKOS_COOKIE_PASSWORD: ${{ secrets.WORKOS_COOKIE_PASSWORD }}
        run: echo "Environment variables securely loaded"

      - name: Run WDIO tests
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          WORKOS_CLIENT_ID: ${{ secrets.WORKOS_CLIENT_ID }}
          WORKOS_COOKIE_PASSWORD: ${{ secrets.WORKOS_COOKIE_PASSWORD }}
        run: npm run test

      - name: Generate Allure Report
        run: npm run allure:generate

      - name: Upload Allure Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
          retention-days: 7  

      - name: Cleanup workspace
        if: always()
        run: rm -rf allure-report


________

import fetch from 'node-fetch';
import { browser } from '@wdio/globals';

async function getWorkOSSession(): Promise<string> {
    const code = 'your_auth_code'; // Replace with the actual authorization code
    const clientId = process.env.WORKOS_CLIENT_ID;
    const cookiePassword = process.env.WORKOS_COOKIE_PASSWORD;

    if (!code) {
        throw new Error('No authorization code provided');
    }

    try {
        const response = await fetch('https://api.workos.com/user_management/authenticate_with_code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.WORKOS_API_KEY}`
            },
            body: JSON.stringify({
                clientId,
                code,
                session: {
                    sealSession: true,
                    cookiePassword
                }
            })
        });

        const data = await response.json();

        if (!data.sealedSession) {
            throw new Error('Failed to retrieve sealed session');
        }

        return data.sealedSession;
    } catch (error) {
        console.error('Error authenticating with WorkOS:', error);
        throw error;
    }
}

before(async () => {
    const sealedSession = await getWorkOSSession();

    await browser.url('https://staging.hipp.health/');
    await browser.setCookies([
        { name: 'wos-session', value: sealedSession, domain: '.hipp.health', httpOnly: true, secure: true, sameSite: 'Lax' }
    ]);
    await browser.refresh();
});



---------


https://staging.hipp.health/oauth/callback?code=4%2F0ASVgi3LqcxdgWfrL_HkQ7SSKg4nf_6hL62rr5IejBHxBWyRbw7Wzr_Q0G6XRKQXaHkT1mg&scope=email+profile+openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&authuser=0&hd=ext.hipp.health&prompt=consent

getAccessToken.ts
----
import { OAuth2Client } from "google-auth-library";
import fs from "fs";
import path from "path";

const CREDENTIALS_PATH = path.join(__dirname, "credentials.json");
const TOKEN_PATH = path.join(__dirname, "token.json");

// Load client credentials
const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf-8"));
const { client_id, client_secret, redirect_uris } = credentials.web; // or credentials.installed

const oAuth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);

async function getAccessToken() {
    const authUrl = oAuth2Client.generateAuthUrl({
        access_type: "offline",
        scope: ["https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"],
        prompt: "consent",
    });

    console.log("Authorize this app by visiting this URL:", authUrl);
}

getAccessToken();


----------
loginWithOAuth.ts


import { OAuth2Client } from "google-auth-library";
import fs from "fs";
import path from "path";
import readline from "readline";

const CREDENTIALS_PATH = path.join(__dirname, "credentials.json");
const TOKEN_PATH = path.join(__dirname, "token.json");

const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf-8"));
const { client_id, client_secret, redirect_uris } = credentials.web; // or credentials.installed

const oAuth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);

async function loginWithOAuth() {
    const authUrl = oAuth2Client.generateAuthUrl({
        access_type: "offline",
        scope: ["https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"],
        prompt: "consent",
    });

    console.log("Authorize this app by visiting this URL:", authUrl);

    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    rl.question("Enter the code from that page here: ", async (code) => {
        rl.close();
        try {
            const { tokens } = await oAuth2Client.getToken(code);
            fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens, null, 2));
            console.log("Token stored to", TOKEN_PATH);
        } catch (error) {
            console.error("Error retrieving access token:", error);
        }
    });
}

loginWithOAuth();


----
refreshToken.ts

import { OAuth2Client } from "google-auth-library";
import fs from "fs";
import path from "path";

const CREDENTIALS_PATH = path.join(__dirname, "credentials.json");
const TOKEN_PATH = path.join(__dirname, "token.json");

const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf-8"));
const { client_id, client_secret, redirect_uris } = credentials.web; // or credentials.installed

const oAuth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);

async function refreshToken() {
    if (!fs.existsSync(TOKEN_PATH)) {
        console.error("No token found. Run loginWithOAuth.ts first.");
        return;
    }

    const tokenData = JSON.parse(fs.readFileSync(TOKEN_PATH, "utf-8"));
    oAuth2Client.setCredentials(tokenData);

    try {
        const newTokens = await oAuth2Client.refreshAccessToken();
        fs.writeFileSync(TOKEN_PATH, JSON.stringify(newTokens.credentials, null, 2));
        console.log("Token refreshed and saved.");
    } catch (error) {
        console.error("Error refreshing access token:", error);
    }
}

refreshToken();
