import fetch from 'node-fetch';
import { browser } from '@wdio/globals';

async function getWorkOSSession(): Promise<string> {
    const code = 'your_auth_code'; // Replace with the actual authorization code
    const clientId = process.env.WORKOS_CLIENT_ID;
    const cookiePassword = process.env.WORKOS_COOKIE_PASSWORD;

    if (!code) {
        throw new Error('No authorization code provided');
    }

    try {
        const response = await fetch('https://api.workos.com/user_management/authenticate_with_code', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.WORKOS_API_KEY}`
            },
            body: JSON.stringify({
                clientId,
                code,
                session: {
                    sealSession: true,
                    cookiePassword
                }
            })
        });

        const data = await response.json();

        if (!data.sealedSession) {
            throw new Error('Failed to retrieve sealed session');
        }

        return data.sealedSession;
    } catch (error) {
        console.error('Error authenticating with WorkOS:', error);
        throw error;
    }
}

before(async () => {
    const sealedSession = await getWorkOSSession();

    await browser.url('https://staging.hipp.health/');
    await browser.setCookies([
        { name: 'wos-session', value: sealedSession, domain: '.hipp.health', httpOnly: true, secure: true, sameSite: 'Lax' }
    ]);
    await browser.refresh();
});



---------


https://staging.hipp.health/oauth/callback?code=4%2F0ASVgi3LqcxdgWfrL_HkQ7SSKg4nf_6hL62rr5IejBHxBWyRbw7Wzr_Q0G6XRKQXaHkT1mg&scope=email+profile+openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&authuser=0&hd=ext.hipp.health&prompt=consent

getAccessToken.ts
----
import { OAuth2Client } from "google-auth-library";
import fs from "fs";
import path from "path";

const CREDENTIALS_PATH = path.join(__dirname, "credentials.json");
const TOKEN_PATH = path.join(__dirname, "token.json");

// Load client credentials
const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf-8"));
const { client_id, client_secret, redirect_uris } = credentials.web; // or credentials.installed

const oAuth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);

async function getAccessToken() {
    const authUrl = oAuth2Client.generateAuthUrl({
        access_type: "offline",
        scope: ["https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"],
        prompt: "consent",
    });

    console.log("Authorize this app by visiting this URL:", authUrl);
}

getAccessToken();


----------
loginWithOAuth.ts


import { OAuth2Client } from "google-auth-library";
import fs from "fs";
import path from "path";
import readline from "readline";

const CREDENTIALS_PATH = path.join(__dirname, "credentials.json");
const TOKEN_PATH = path.join(__dirname, "token.json");

const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf-8"));
const { client_id, client_secret, redirect_uris } = credentials.web; // or credentials.installed

const oAuth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);

async function loginWithOAuth() {
    const authUrl = oAuth2Client.generateAuthUrl({
        access_type: "offline",
        scope: ["https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"],
        prompt: "consent",
    });

    console.log("Authorize this app by visiting this URL:", authUrl);

    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    rl.question("Enter the code from that page here: ", async (code) => {
        rl.close();
        try {
            const { tokens } = await oAuth2Client.getToken(code);
            fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens, null, 2));
            console.log("Token stored to", TOKEN_PATH);
        } catch (error) {
            console.error("Error retrieving access token:", error);
        }
    });
}

loginWithOAuth();


----
refreshToken.ts

import { OAuth2Client } from "google-auth-library";
import fs from "fs";
import path from "path";

const CREDENTIALS_PATH = path.join(__dirname, "credentials.json");
const TOKEN_PATH = path.join(__dirname, "token.json");

const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf-8"));
const { client_id, client_secret, redirect_uris } = credentials.web; // or credentials.installed

const oAuth2Client = new OAuth2Client(client_id, client_secret, redirect_uris[0]);

async function refreshToken() {
    if (!fs.existsSync(TOKEN_PATH)) {
        console.error("No token found. Run loginWithOAuth.ts first.");
        return;
    }

    const tokenData = JSON.parse(fs.readFileSync(TOKEN_PATH, "utf-8"));
    oAuth2Client.setCredentials(tokenData);

    try {
        const newTokens = await oAuth2Client.refreshAccessToken();
        fs.writeFileSync(TOKEN_PATH, JSON.stringify(newTokens.credentials, null, 2));
        console.log("Token refreshed and saved.");
    } catch (error) {
        console.error("Error refreshing access token:", error);
    }
}

refreshToken();
