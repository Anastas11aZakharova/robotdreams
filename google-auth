getAccessToken.ts
----
import { google } from "google-auth-library";
import * as fs from "fs";
import * as readline from "readline";

interface Credentials {
    installed: {
        client_id: string;
        client_secret: string;
        redirect_uris: string[];
    };
}

interface TokenData {
    access_token: string;
    refresh_token: string;
    expiry_date: number;
}

async function getAccessToken(): Promise<void> {
    // Read credentials.json
    const credentials: Credentials = JSON.parse(fs.readFileSync("credentials.json", "utf-8"));
    const { client_id, client_secret, redirect_uris } = credentials.installed;

    // Initialize OAuth2 Client
    const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);

    // Generate Auth URL
    const authUrl = oAuth2Client.generateAuthUrl({
        access_type: "offline",
        scope: ["https://www.googleapis.com/auth/userinfo.email"],
    });

    console.log("Authorize this app by visiting:", authUrl);

    // Prompt user for the authorization code
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    rl.question("Enter the code from that page here: ", async (code: string) => {
        rl.close();
        const { tokens } = await oAuth2Client.getToken(code);
        oAuth2Client.setCredentials(tokens);
        fs.writeFileSync("token.json", JSON.stringify(tokens));
        console.log("Token stored successfully.");
    });
}

getAccessToken().catch(console.error);


----------
loginWithOAuth.ts


import { remote, Browser } from "webdriverio";
import * as fs from "fs";

interface TokenData {
    access_token: string;
    refresh_token: string;
    expiry_date: number;
}

async function loginWithOAuthToken(): Promise<void> {
    // Initialize WebDriverIO session
    const browser: Browser<"async"> = await remote({
        capabilities: { browserName: "chrome" }
    });

    await browser.url("https://accounts.google.com");

    // Load OAuth token from file
    if (!fs.existsSync("token.json")) {
        console.error("Error: No token.json file found. Run getAccessToken.ts first.");
        return;
    }

    const tokenData: TokenData = JSON.parse(fs.readFileSync("token.json", "utf-8"));
    console.log("Using OAuth Token:", tokenData.access_token);

    // Set OAuth token as a cookie
    await browser.setCookies([
        {
            name: "OAuthAccessToken",
            value: tokenData.access_token,
            domain: ".google.com",
            path: "/"
        }
    ]);

    await browser.refresh();
    console.log("Login successful using OAuth token!");

    await browser.deleteSession();
}

loginWithOAuthToken().catch(console.error);


----
refreshToken.ts

import { google } from "google-auth-library";
import * as fs from "fs";

interface Credentials {
    installed: {
        client_id: string;
        client_secret: string;
        redirect_uris: string[];
    };
}

interface TokenData {
    access_token: string;
    refresh_token: string;
    expiry_date: number;
}

async function refreshAccessToken(): Promise<void> {
    if (!fs.existsSync("credentials.json") || !fs.existsSync("token.json")) {
        console.error("Error: Missing credentials.json or token.json.");
        return;
    }

    const credentials: Credentials = JSON.parse(fs.readFileSync("credentials.json", "utf-8"));
    const tokenData: TokenData = JSON.parse(fs.readFileSync("token.json", "utf-8"));

    const { client_id, client_secret } = credentials.installed;
    const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, "urn:ietf:wg:oauth:2.0:oob");

    oAuth2Client.setCredentials(tokenData);

    if (Date.now() >= tokenData.expiry_date) {
        console.log("Access token expired. Refreshing...");
        const { credentials: newToken } = await oAuth2Client.refreshAccessToken();

        const updatedToken: TokenData = {
            access_token: newToken.access_token!,
            refresh_token: tokenData.refresh_token,
            expiry_date: newToken.expiry_date!,
        };

        fs.writeFileSync("token.json", JSON.stringify(updatedToken));
        console.log("Token refreshed and saved.");
    } else {
        console.log("Access token is still valid.");
    }
}

refreshAccessToken().catch(console.error);
